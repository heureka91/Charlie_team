{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\M\\xE1rk\\\\Desktop\\\\tesztFolder-main\\\\src\\\\components\\\\RegistrationForm.tsx\",\n  _s = $RefreshSig$();\n// src/RegistrationForm.tsx\nimport React, { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { Formik } from 'formik';\nimport { useToast } from '@chakra-ui/react';\nimport * as Yup from 'yup';\nimport RegistrationFormView from './RegistrationFormView';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst validationSchema = Yup.object({\n  username: Yup.string().email('Érvénytelen email cím').required('Kötelező mező'),\n  password: Yup.string().min(8, 'A jelszónak legalább 8 karakter hosszúnak kell lennie').matches(/\\d/, 'A jelszónak tartalmaznia kell legalább egy számot').matches(/[a-z]/, 'A jelszónak tartalmaznia kell legalább egy kisbetűt').required('Kötelező mező'),\n  passwordConfirm: Yup.string().oneOf([Yup.ref('password'), undefined], 'A jelszavaknak meg kell egyezniük').required('Kötelező mező'),\n  firstName: Yup.string().required('Kötelező mező'),\n  lastName: Yup.string().required('Kötelező mező')\n});\nconst RegistrationForm = () => {\n  _s();\n  const [error, setError] = useState(null);\n  const navigate = useNavigate();\n  const toast = useToast();\n  const initialValues = {\n    username: '',\n    password: '',\n    passwordConfirm: '',\n    firstName: '',\n    lastName: ''\n  };\n  const handleSubmit = async (values, {\n    resetForm\n  }) => {\n    setError(null);\n    try {\n      const response = await fetch('http://localhost:5000/user', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(values)\n      });\n      if (response.ok) {\n        const data = await response.json();\n        localStorage.setItem('token', data.accessToken);\n        toast({\n          title: 'Sikeres regisztráció!',\n          status: 'success',\n          duration: 5000,\n          isClosable: true\n        });\n        resetForm();\n        navigate('/profile');\n      } else {\n        const errorData = await response.json();\n        switch (response.status) {\n          case 400:\n            throw new Error(errorData.message || 'A bevitt adatok érvénytelenek.');\n          case 409:\n            throw new Error(errorData.message || 'A felhasználó már létezik.');\n          default:\n            throw new Error(errorData.message || 'Ismeretlen hiba történt.');\n        }\n      }\n    } catch (error) {\n      if (error instanceof Error) {\n        setError(error.message);\n        toast({\n          title: 'Hiba történt',\n          description: error.message,\n          status: 'error',\n          duration: 5000,\n          isClosable: true\n        });\n      } else {\n        setError('Ismeretlen hiba történt.');\n        toast({\n          title: 'Hiba történt',\n          description: 'Ismeretlen hiba történt.',\n          status: 'error',\n          duration: 5000,\n          isClosable: true\n        });\n      }\n    }\n  };\n  const handleCancel = () => {\n    navigate('/login'); // Navigálj a bejelentkezési oldalra a \"Mégsem\" gombbal\n  };\n  return /*#__PURE__*/_jsxDEV(Formik, {\n    initialValues: initialValues,\n    validationSchema: validationSchema,\n    onSubmit: handleSubmit,\n    children: formikProps => /*#__PURE__*/_jsxDEV(RegistrationFormView, {\n      formik: formikProps,\n      error: error,\n      onCancel: handleCancel\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 31\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 105,\n    columnNumber: 9\n  }, this);\n};\n_s(RegistrationForm, \"d0SNK5OYw+fCrwqyOMtELy7OE1k=\", false, function () {\n  return [useNavigate, useToast];\n});\n_c = RegistrationForm;\nexport default RegistrationForm;\nvar _c;\n$RefreshReg$(_c, \"RegistrationForm\");","map":{"version":3,"names":["React","useState","useNavigate","Formik","useToast","Yup","RegistrationFormView","jsxDEV","_jsxDEV","validationSchema","object","username","string","email","required","password","min","matches","passwordConfirm","oneOf","ref","undefined","firstName","lastName","RegistrationForm","_s","error","setError","navigate","toast","initialValues","handleSubmit","values","resetForm","response","fetch","method","headers","body","JSON","stringify","ok","data","json","localStorage","setItem","accessToken","title","status","duration","isClosable","errorData","Error","message","description","handleCancel","onSubmit","children","formikProps","formik","onCancel","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Márk/Desktop/tesztFolder-main/src/components/RegistrationForm.tsx"],"sourcesContent":["// src/RegistrationForm.tsx\nimport React, { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { Formik, FormikHelpers } from 'formik';\nimport { useToast } from '@chakra-ui/react';\nimport * as Yup from 'yup';\nimport RegistrationFormView from './RegistrationFormView';\n\ninterface FormValues {\n    username: string;\n    password: string;\n    passwordConfirm: string;\n    firstName: string;\n    lastName: string;\n}\n\nconst validationSchema = Yup.object({\n    username: Yup.string().email('Érvénytelen email cím').required('Kötelező mező'),\n    password: Yup.string()\n        .min(8, 'A jelszónak legalább 8 karakter hosszúnak kell lennie')\n        .matches(/\\d/, 'A jelszónak tartalmaznia kell legalább egy számot')\n        .matches(/[a-z]/, 'A jelszónak tartalmaznia kell legalább egy kisbetűt')\n        .required('Kötelező mező'),\n    passwordConfirm: Yup.string()\n        .oneOf([Yup.ref('password'), undefined], 'A jelszavaknak meg kell egyezniük')\n        .required('Kötelező mező'),\n    firstName: Yup.string().required('Kötelező mező'),\n    lastName: Yup.string().required('Kötelező mező'),\n});\n\nconst RegistrationForm: React.FC = () => {\n    const [error, setError] = useState<string | null>(null);\n    const navigate = useNavigate();\n    const toast = useToast();\n\n    const initialValues: FormValues = {\n        username: '',\n        password: '',\n        passwordConfirm: '',\n        firstName: '',\n        lastName: '',\n    };\n\n    const handleSubmit = async (values: FormValues, { resetForm }: FormikHelpers<FormValues>) => {\n        setError(null);\n        try {\n            const response = await fetch('http://localhost:5000/user', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify(values),\n            });\n\n            if (response.ok) {\n                const data = await response.json();\n                localStorage.setItem('token', data.accessToken);\n                toast({\n                    title: 'Sikeres regisztráció!',\n                    status: 'success',\n                    duration: 5000,\n                    isClosable: true,\n                });\n                resetForm();\n                navigate('/profile');\n            } else {\n                const errorData = await response.json();\n                switch (response.status) {\n                    case 400:\n                        throw new Error(errorData.message || 'A bevitt adatok érvénytelenek.');\n                    case 409:\n                        throw new Error(errorData.message || 'A felhasználó már létezik.');\n                    default:\n                        throw new Error(errorData.message || 'Ismeretlen hiba történt.');\n                }\n            }\n        } catch (error) {\n            if (error instanceof Error) {\n                setError(error.message);\n                toast({\n                    title: 'Hiba történt',\n                    description: error.message,\n                    status: 'error',\n                    duration: 5000,\n                    isClosable: true,\n                });\n            } else {\n                setError('Ismeretlen hiba történt.');\n                toast({\n                    title: 'Hiba történt',\n                    description: 'Ismeretlen hiba történt.',\n                    status: 'error',\n                    duration: 5000,\n                    isClosable: true,\n                });\n            }\n        }\n    };\n\n    const handleCancel = () => {\n        navigate('/login'); // Navigálj a bejelentkezési oldalra a \"Mégsem\" gombbal\n    };\n\n    return (\n        <Formik initialValues={initialValues} validationSchema={validationSchema} onSubmit={handleSubmit}>\n            {(formikProps) => <RegistrationFormView formik={formikProps} error={error} onCancel={handleCancel} />}\n        </Formik>\n    );\n};\n\nexport default RegistrationForm;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}